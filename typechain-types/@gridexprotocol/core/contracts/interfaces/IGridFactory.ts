/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IGridFactoryInterface extends utils.Interface {
  functions: {
    "concatGridSuffixCreationCode(bytes)": FunctionFragment;
    "createGrid(address,address,int24)": FunctionFragment;
    "grids(address,address,int24)": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "resolutions(int24)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "concatGridSuffixCreationCode"
      | "createGrid"
      | "grids"
      | "priceOracle"
      | "resolutions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "concatGridSuffixCreationCode",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createGrid",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "grids",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolutions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "concatGridSuffixCreationCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createGrid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolutions",
    data: BytesLike
  ): Result;

  events: {
    "GridCreated(address,address,int24,address)": EventFragment;
    "ResolutionEnabled(int24,int24)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GridCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolutionEnabled"): EventFragment;
}

export interface GridCreatedEventObject {
  token0: string;
  token1: string;
  resolution: number;
  grid: string;
}
export type GridCreatedEvent = TypedEvent<
  [string, string, number, string],
  GridCreatedEventObject
>;

export type GridCreatedEventFilter = TypedEventFilter<GridCreatedEvent>;

export interface ResolutionEnabledEventObject {
  resolution: number;
  takerFee: number;
}
export type ResolutionEnabledEvent = TypedEvent<
  [number, number],
  ResolutionEnabledEventObject
>;

export type ResolutionEnabledEventFilter =
  TypedEventFilter<ResolutionEnabledEvent>;

export interface IGridFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGridFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    concatGridSuffixCreationCode(
      gridSuffixCreationCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createGrid(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      resolution: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grids(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      resolution: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { grid: string }>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    resolutions(
      resolution: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { takerFee: number }>;
  };

  concatGridSuffixCreationCode(
    gridSuffixCreationCode: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createGrid(
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    resolution: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grids(
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    resolution: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  resolutions(
    resolution: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    concatGridSuffixCreationCode(
      gridSuffixCreationCode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createGrid(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      resolution: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    grids(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      resolution: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    resolutions(
      resolution: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {
    "GridCreated(address,address,int24,address)"(
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      resolution?: PromiseOrValue<BigNumberish> | null,
      grid?: null
    ): GridCreatedEventFilter;
    GridCreated(
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      resolution?: PromiseOrValue<BigNumberish> | null,
      grid?: null
    ): GridCreatedEventFilter;

    "ResolutionEnabled(int24,int24)"(
      resolution?: PromiseOrValue<BigNumberish> | null,
      takerFee?: PromiseOrValue<BigNumberish> | null
    ): ResolutionEnabledEventFilter;
    ResolutionEnabled(
      resolution?: PromiseOrValue<BigNumberish> | null,
      takerFee?: PromiseOrValue<BigNumberish> | null
    ): ResolutionEnabledEventFilter;
  };

  estimateGas: {
    concatGridSuffixCreationCode(
      gridSuffixCreationCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createGrid(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      resolution: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grids(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      resolution: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    resolutions(
      resolution: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    concatGridSuffixCreationCode(
      gridSuffixCreationCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createGrid(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      resolution: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grids(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      resolution: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resolutions(
      resolution: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
