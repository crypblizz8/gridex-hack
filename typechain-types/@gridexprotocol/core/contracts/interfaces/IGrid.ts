/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace IGridParameters {
  export type BoundaryLowerWithAmountParametersStruct = {
    boundaryLower: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type BoundaryLowerWithAmountParametersStructOutput = [
    number,
    BigNumber
  ] & { boundaryLower: number; amount: BigNumber };

  export type InitializeParametersStruct = {
    priceX96: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
    orders0: IGridParameters.BoundaryLowerWithAmountParametersStruct[];
    orders1: IGridParameters.BoundaryLowerWithAmountParametersStruct[];
  };

  export type InitializeParametersStructOutput = [
    BigNumber,
    string,
    IGridParameters.BoundaryLowerWithAmountParametersStructOutput[],
    IGridParameters.BoundaryLowerWithAmountParametersStructOutput[]
  ] & {
    priceX96: BigNumber;
    recipient: string;
    orders0: IGridParameters.BoundaryLowerWithAmountParametersStructOutput[];
    orders1: IGridParameters.BoundaryLowerWithAmountParametersStructOutput[];
  };

  export type PlaceOrderParametersStruct = {
    recipient: PromiseOrValue<string>;
    zero: PromiseOrValue<boolean>;
    boundaryLower: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type PlaceOrderParametersStructOutput = [
    string,
    boolean,
    number,
    BigNumber
  ] & {
    recipient: string;
    zero: boolean;
    boundaryLower: number;
    amount: BigNumber;
  };

  export type PlaceOrderInBatchParametersStruct = {
    recipient: PromiseOrValue<string>;
    zero: PromiseOrValue<boolean>;
    orders: IGridParameters.BoundaryLowerWithAmountParametersStruct[];
  };

  export type PlaceOrderInBatchParametersStructOutput = [
    string,
    boolean,
    IGridParameters.BoundaryLowerWithAmountParametersStructOutput[]
  ] & {
    recipient: string;
    zero: boolean;
    orders: IGridParameters.BoundaryLowerWithAmountParametersStructOutput[];
  };
}

export interface IGridInterface extends utils.Interface {
  functions: {
    "boundaries0(int24)": FunctionFragment;
    "boundaries1(int24)": FunctionFragment;
    "boundaryBitmaps0(int16)": FunctionFragment;
    "boundaryBitmaps1(int16)": FunctionFragment;
    "bundles(uint64)": FunctionFragment;
    "collect(address,uint128,uint128)": FunctionFragment;
    "flash(address,uint256,uint256,bytes)": FunctionFragment;
    "initialize((uint160,address,(int24,uint128)[],(int24,uint128)[]),bytes)": FunctionFragment;
    "orders(uint256)": FunctionFragment;
    "placeMakerOrder((address,bool,int24,uint128),bytes)": FunctionFragment;
    "placeMakerOrderInBatch((address,bool,(int24,uint128)[]),bytes)": FunctionFragment;
    "resolution()": FunctionFragment;
    "settleMakerOrder(uint256)": FunctionFragment;
    "settleMakerOrderAndCollect(address,uint256,bool)": FunctionFragment;
    "settleMakerOrderAndCollectInBatch(address,uint256[],bool)": FunctionFragment;
    "slot0()": FunctionFragment;
    "swap(address,bool,int256,uint160,bytes)": FunctionFragment;
    "takerFee()": FunctionFragment;
    "token0()": FunctionFragment;
    "token1()": FunctionFragment;
    "tokensOweds(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "boundaries0"
      | "boundaries1"
      | "boundaryBitmaps0"
      | "boundaryBitmaps1"
      | "bundles"
      | "collect"
      | "flash"
      | "initialize"
      | "orders"
      | "placeMakerOrder"
      | "placeMakerOrderInBatch"
      | "resolution"
      | "settleMakerOrder"
      | "settleMakerOrderAndCollect"
      | "settleMakerOrderAndCollectInBatch"
      | "slot0"
      | "swap"
      | "takerFee"
      | "token0"
      | "token1"
      | "tokensOweds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "boundaries0",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "boundaries1",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "boundaryBitmaps0",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "boundaryBitmaps1",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bundles",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "flash",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      IGridParameters.InitializeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "placeMakerOrder",
    values: [
      IGridParameters.PlaceOrderParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "placeMakerOrderInBatch",
    values: [
      IGridParameters.PlaceOrderInBatchParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "resolution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settleMakerOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleMakerOrderAndCollect",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "settleMakerOrderAndCollectInBatch",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "slot0", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "takerFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensOweds",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "boundaries0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boundaries1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boundaryBitmaps0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boundaryBitmaps1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bundles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeMakerOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeMakerOrderInBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolution", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleMakerOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleMakerOrderAndCollect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleMakerOrderAndCollectInBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slot0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "takerFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensOweds",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IGrid extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGridInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    boundaries0(
      boundary: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        bundle0Id: BigNumber;
        bundle1Id: BigNumber;
        makerAmountRemaining: BigNumber;
      }
    >;

    boundaries1(
      boundary: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        bundle0Id: BigNumber;
        bundle1Id: BigNumber;
        makerAmountRemaining: BigNumber;
      }
    >;

    boundaryBitmaps0(
      wordPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { word: BigNumber }>;

    boundaryBitmaps1(
      wordPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { word: BigNumber }>;

    bundles(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        boundaryLower: number;
        zero: boolean;
        makerAmountTotal: BigNumber;
        makerAmountRemaining: BigNumber;
        takerAmountRemaining: BigNumber;
        takerFeeAmountRemaining: BigNumber;
      }
    >;

    collect(
      recipient: PromiseOrValue<string>,
      amount0Requested: PromiseOrValue<BigNumberish>,
      amount1Requested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    flash(
      recipient: PromiseOrValue<string>,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      parameters: IGridParameters.InitializeParametersStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    orders(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        bundleId: BigNumber;
        owner: string;
        amount: BigNumber;
      }
    >;

    placeMakerOrder(
      parameters: IGridParameters.PlaceOrderParametersStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    placeMakerOrderInBatch(
      parameters: IGridParameters.PlaceOrderInBatchParametersStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolution(overrides?: CallOverrides): Promise<[number]>;

    settleMakerOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleMakerOrderAndCollect(
      recipient: PromiseOrValue<string>,
      orderId: PromiseOrValue<BigNumberish>,
      unwrapWETH9: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleMakerOrderAndCollectInBatch(
      recipient: PromiseOrValue<string>,
      orderIds: PromiseOrValue<BigNumberish>[],
      unwrapWETH9: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    slot0(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, boolean] & {
        priceX96: BigNumber;
        boundary: number;
        blockTimestamp: number;
        unlocked: boolean;
      }
    >;

    swap(
      recipient: PromiseOrValue<string>,
      zeroForOne: PromiseOrValue<boolean>,
      amountSpecified: PromiseOrValue<BigNumberish>,
      priceLimitX96: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    takerFee(overrides?: CallOverrides): Promise<[number]>;

    token0(overrides?: CallOverrides): Promise<[string]>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    tokensOweds(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber }
    >;
  };

  boundaries0(
    boundary: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      bundle0Id: BigNumber;
      bundle1Id: BigNumber;
      makerAmountRemaining: BigNumber;
    }
  >;

  boundaries1(
    boundary: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      bundle0Id: BigNumber;
      bundle1Id: BigNumber;
      makerAmountRemaining: BigNumber;
    }
  >;

  boundaryBitmaps0(
    wordPos: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  boundaryBitmaps1(
    wordPos: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bundles(
    bundleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
      boundaryLower: number;
      zero: boolean;
      makerAmountTotal: BigNumber;
      makerAmountRemaining: BigNumber;
      takerAmountRemaining: BigNumber;
      takerFeeAmountRemaining: BigNumber;
    }
  >;

  collect(
    recipient: PromiseOrValue<string>,
    amount0Requested: PromiseOrValue<BigNumberish>,
    amount1Requested: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  flash(
    recipient: PromiseOrValue<string>,
    amount0: PromiseOrValue<BigNumberish>,
    amount1: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    parameters: IGridParameters.InitializeParametersStruct,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  orders(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber] & {
      bundleId: BigNumber;
      owner: string;
      amount: BigNumber;
    }
  >;

  placeMakerOrder(
    parameters: IGridParameters.PlaceOrderParametersStruct,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  placeMakerOrderInBatch(
    parameters: IGridParameters.PlaceOrderInBatchParametersStruct,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolution(overrides?: CallOverrides): Promise<number>;

  settleMakerOrder(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleMakerOrderAndCollect(
    recipient: PromiseOrValue<string>,
    orderId: PromiseOrValue<BigNumberish>,
    unwrapWETH9: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleMakerOrderAndCollectInBatch(
    recipient: PromiseOrValue<string>,
    orderIds: PromiseOrValue<BigNumberish>[],
    unwrapWETH9: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  slot0(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, boolean] & {
      priceX96: BigNumber;
      boundary: number;
      blockTimestamp: number;
      unlocked: boolean;
    }
  >;

  swap(
    recipient: PromiseOrValue<string>,
    zeroForOne: PromiseOrValue<boolean>,
    amountSpecified: PromiseOrValue<BigNumberish>,
    priceLimitX96: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  takerFee(overrides?: CallOverrides): Promise<number>;

  token0(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  tokensOweds(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber }>;

  callStatic: {
    boundaries0(
      boundary: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        bundle0Id: BigNumber;
        bundle1Id: BigNumber;
        makerAmountRemaining: BigNumber;
      }
    >;

    boundaries1(
      boundary: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        bundle0Id: BigNumber;
        bundle1Id: BigNumber;
        makerAmountRemaining: BigNumber;
      }
    >;

    boundaryBitmaps0(
      wordPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boundaryBitmaps1(
      wordPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bundles(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        boundaryLower: number;
        zero: boolean;
        makerAmountTotal: BigNumber;
        makerAmountRemaining: BigNumber;
        takerAmountRemaining: BigNumber;
        takerFeeAmountRemaining: BigNumber;
      }
    >;

    collect(
      recipient: PromiseOrValue<string>,
      amount0Requested: PromiseOrValue<BigNumberish>,
      amount1Requested: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    flash(
      recipient: PromiseOrValue<string>,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      parameters: IGridParameters.InitializeParametersStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        orderIds0: BigNumber[];
        orderIds1: BigNumber[];
      }
    >;

    orders(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        bundleId: BigNumber;
        owner: string;
        amount: BigNumber;
      }
    >;

    placeMakerOrder(
      parameters: IGridParameters.PlaceOrderParametersStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    placeMakerOrderInBatch(
      parameters: IGridParameters.PlaceOrderInBatchParametersStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    resolution(overrides?: CallOverrides): Promise<number>;

    settleMakerOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    settleMakerOrderAndCollect(
      recipient: PromiseOrValue<string>,
      orderId: PromiseOrValue<BigNumberish>,
      unwrapWETH9: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    settleMakerOrderAndCollectInBatch(
      recipient: PromiseOrValue<string>,
      orderIds: PromiseOrValue<BigNumberish>[],
      unwrapWETH9: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amount0Total: BigNumber;
        amount1Total: BigNumber;
      }
    >;

    slot0(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, boolean] & {
        priceX96: BigNumber;
        boundary: number;
        blockTimestamp: number;
        unlocked: boolean;
      }
    >;

    swap(
      recipient: PromiseOrValue<string>,
      zeroForOne: PromiseOrValue<boolean>,
      amountSpecified: PromiseOrValue<BigNumberish>,
      priceLimitX96: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    takerFee(overrides?: CallOverrides): Promise<number>;

    token0(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;

    tokensOweds(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber }
    >;
  };

  filters: {};

  estimateGas: {
    boundaries0(
      boundary: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boundaries1(
      boundary: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boundaryBitmaps0(
      wordPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boundaryBitmaps1(
      wordPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bundles(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collect(
      recipient: PromiseOrValue<string>,
      amount0Requested: PromiseOrValue<BigNumberish>,
      amount1Requested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    flash(
      recipient: PromiseOrValue<string>,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      parameters: IGridParameters.InitializeParametersStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    orders(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    placeMakerOrder(
      parameters: IGridParameters.PlaceOrderParametersStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    placeMakerOrderInBatch(
      parameters: IGridParameters.PlaceOrderInBatchParametersStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolution(overrides?: CallOverrides): Promise<BigNumber>;

    settleMakerOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleMakerOrderAndCollect(
      recipient: PromiseOrValue<string>,
      orderId: PromiseOrValue<BigNumberish>,
      unwrapWETH9: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleMakerOrderAndCollectInBatch(
      recipient: PromiseOrValue<string>,
      orderIds: PromiseOrValue<BigNumberish>[],
      unwrapWETH9: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    slot0(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      recipient: PromiseOrValue<string>,
      zeroForOne: PromiseOrValue<boolean>,
      amountSpecified: PromiseOrValue<BigNumberish>,
      priceLimitX96: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    takerFee(overrides?: CallOverrides): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    tokensOweds(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    boundaries0(
      boundary: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boundaries1(
      boundary: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boundaryBitmaps0(
      wordPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boundaryBitmaps1(
      wordPos: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bundles(
      bundleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collect(
      recipient: PromiseOrValue<string>,
      amount0Requested: PromiseOrValue<BigNumberish>,
      amount1Requested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    flash(
      recipient: PromiseOrValue<string>,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      parameters: IGridParameters.InitializeParametersStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    orders(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    placeMakerOrder(
      parameters: IGridParameters.PlaceOrderParametersStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    placeMakerOrderInBatch(
      parameters: IGridParameters.PlaceOrderInBatchParametersStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolution(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    settleMakerOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleMakerOrderAndCollect(
      recipient: PromiseOrValue<string>,
      orderId: PromiseOrValue<BigNumberish>,
      unwrapWETH9: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleMakerOrderAndCollectInBatch(
      recipient: PromiseOrValue<string>,
      orderIds: PromiseOrValue<BigNumberish>[],
      unwrapWETH9: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    slot0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      recipient: PromiseOrValue<string>,
      zeroForOne: PromiseOrValue<boolean>,
      amountSpecified: PromiseOrValue<BigNumberish>,
      priceLimitX96: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    takerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensOweds(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
