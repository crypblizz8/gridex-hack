/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  BoundaryMath,
  BoundaryMathInterface,
} from "../../../../../@gridexprotocol/core/contracts/libraries/BoundaryMath";

const _abi = [
  {
    inputs: [],
    name: "MAX_BOUNDARY",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MIN_BOUNDARY",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60be610039600b82828239805160001a60731461002c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c8063aeaabde9146042578063d4dc1e7314607f575b600080fd5b60687ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f3d881565b60405160029190910b815260200160405180910390f35b60686206c4f38156fea2646970667358221220245480129248d3376bd9d999e62dbc3bc5a3f73fce3caeb37bfd44d3db83e33d64736f6c63430008090033";

type BoundaryMathConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BoundaryMathConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BoundaryMath__factory extends ContractFactory {
  constructor(...args: BoundaryMathConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BoundaryMath> {
    return super.deploy(overrides || {}) as Promise<BoundaryMath>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BoundaryMath {
    return super.attach(address) as BoundaryMath;
  }
  override connect(signer: Signer): BoundaryMath__factory {
    return super.connect(signer) as BoundaryMath__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BoundaryMathInterface {
    return new utils.Interface(_abi) as BoundaryMathInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BoundaryMath {
    return new Contract(address, _abi, signerOrProvider) as BoundaryMath;
  }
}
