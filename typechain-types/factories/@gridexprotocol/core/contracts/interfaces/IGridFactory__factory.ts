/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IGridFactory,
  IGridFactoryInterface,
} from "../../../../../@gridexprotocol/core/contracts/interfaces/IGridFactory";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        indexed: true,
        internalType: "int24",
        name: "resolution",
        type: "int24",
      },
      {
        indexed: false,
        internalType: "address",
        name: "grid",
        type: "address",
      },
    ],
    name: "GridCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "int24",
        name: "resolution",
        type: "int24",
      },
      {
        indexed: true,
        internalType: "int24",
        name: "takerFee",
        type: "int24",
      },
    ],
    name: "ResolutionEnabled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "gridSuffixCreationCode",
        type: "bytes",
      },
    ],
    name: "concatGridSuffixCreationCode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "int24",
        name: "resolution",
        type: "int24",
      },
    ],
    name: "createGrid",
    outputs: [
      {
        internalType: "address",
        name: "grid",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "int24",
        name: "resolution",
        type: "int24",
      },
    ],
    name: "grids",
    outputs: [
      {
        internalType: "address",
        name: "grid",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceOracle",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "resolution",
        type: "int24",
      },
    ],
    name: "resolutions",
    outputs: [
      {
        internalType: "int24",
        name: "takerFee",
        type: "int24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IGridFactory__factory {
  static readonly abi = _abi;
  static createInterface(): IGridFactoryInterface {
    return new utils.Interface(_abi) as IGridFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IGridFactory {
    return new Contract(address, _abi, signerOrProvider) as IGridFactory;
  }
}
