/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ExampleMakerOrder,
  ExampleMakerOrderInterface,
} from "../../contracts/ExampleMakerOrder";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IMakerOrderManager",
        name: "_makerOrderManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "RESOLUTION",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDC",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH9",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "makerOrderManager",
    outputs: [
      {
        internalType: "contract IMakerOrderManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
    ],
    name: "placeMakerOrderForUSDC",
    outputs: [
      {
        internalType: "uint256",
        name: "orderId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
    ],
    name: "placeMakerOrderForWETH9",
    outputs: [
      {
        internalType: "uint256",
        name: "orderId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "orderId",
        type: "uint256",
      },
    ],
    name: "settleAndCollect",
    outputs: [
      {
        internalType: "uint128",
        name: "amount0",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "amount1",
        type: "uint128",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516114a83803806114a883398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516113f36100b560003960008181610172015281816101e201528181610220015281816105140152818161061601528181610654015261086801526113f36000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063552f888a1161005b578063552f888a146100fb578063805daf921461011657806389a3027114610152578063c7ab21561461016d57600080fd5b80632d26558d1461008257806331fb792a146100a85780634aa4a4fc146100bb575b600080fd5b6100956100903660046110f0565b610194565b6040519081526020015b60405180910390f35b6100956100b63660046110f0565b6105c8565b6100d67382af49447d8a07e3bd95bd0d56f35241523fbab181565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161009f565b610103600581565b60405160029190910b815260200161009f565b61012961012436600461110d565b61085e565b604080516fffffffffffffffffffffffffffffffff93841681529290911660208301520161009f565b6100d673ff970a61a04b1ca14834a43f5de4533ebddb5cc881565b6100d67f000000000000000000000000000000000000000000000000000000000000000081565b60006101c87382af49447d8a07e3bd95bd0d56f35241523fbab13330856fffffffffffffffffffffffffffffffff16610986565b6102197382af49447d8a07e3bd95bd0d56f35241523fbab17f0000000000000000000000000000000000000000000000000000000000000000846fffffffffffffffffffffffffffffffff16610a68565b60006102f57f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166303a7dcdc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561028457600080fd5b505afa158015610298573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bc9190611148565b6102f07382af49447d8a07e3bd95bd0d56f35241523fbab173ff970a61a04b1ca14834a43f5de4533ebddb5cc86005610c03565b610c93565b9050600081905060008173ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160806040518083038186803b15801561034457600080fd5b505afa158015610358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037c919061117a565b5050915050600061038e826005610d65565b905060006040518061010001604052804281526020013073ffffffffffffffffffffffffffffffffffffffff1681526020017382af49447d8a07e3bd95bd0d56f35241523fbab173ffffffffffffffffffffffffffffffffffffffff16815260200173ff970a61a04b1ca14834a43f5de4533ebddb5cc873ffffffffffffffffffffffffffffffffffffffff168152602001600560020b81526020017382af49447d8a07e3bd95bd0d56f35241523fbab173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561049b57600080fd5b505afa1580156104af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d39190611148565b73ffffffffffffffffffffffffffffffffffffffff1614151581526020018360020b8152602001886fffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342d95cc7826040518263ffffffff1660e01b815260040161056b91906111e6565b602060405180830381600087803b15801561058557600080fd5b505af1158015610599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bd9190611287565b979650505050505050565b60006105fc73ff970a61a04b1ca14834a43f5de4533ebddb5cc83330856fffffffffffffffffffffffffffffffff16610986565b61064d73ff970a61a04b1ca14834a43f5de4533ebddb5cc87f0000000000000000000000000000000000000000000000000000000000000000846fffffffffffffffffffffffffffffffff16610a68565b60006106b87f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166303a7dcdc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561028457600080fd5b9050600081905060008173ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160806040518083038186803b15801561070757600080fd5b505afa15801561071b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073f919061117a565b50509150506000610751826005610d65565b905060006040518061010001604052804281526020013073ffffffffffffffffffffffffffffffffffffffff1681526020017382af49447d8a07e3bd95bd0d56f35241523fbab173ffffffffffffffffffffffffffffffffffffffff16815260200173ff970a61a04b1ca14834a43f5de4533ebddb5cc873ffffffffffffffffffffffffffffffffffffffff168152602001600560020b815260200173ff970a61a04b1ca14834a43f5de4533ebddb5cc873ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561049b57600080fd5b60008060006108cc7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166303a7dcdc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561028457600080fd5b6040517f8455c01d000000000000000000000000000000000000000000000000000000008152336004820152602481018690526001604482015290915073ffffffffffffffffffffffffffffffffffffffff821690638455c01d906064016040805180830381600087803b15801561094357600080fd5b505af1158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b91906112a0565b909590945092505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610a629085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610d9d565b50505050565b801580610b1757506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e9060440160206040518083038186803b158015610add57600080fd5b505afa158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b159190611287565b155b610ba8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084015b60405180910390fd5b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610bfe9084907f095ea7b300000000000000000000000000000000000000000000000000000000906064016109e0565b505050565b60408051606081018252600080825260208201819052918101919091528273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115610c58579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015260020b9181019190915290565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1610610cd557600080fd5b8151602080840151604080860151815173ffffffffffffffffffffffffffffffffffffffff95861694810194909452939091169082015260029190910b6060820152610d5e90608001604051602081830303815290604052805190602001207f884a6891a166f885bf6f0a3b330a25e41d1761a5aa091110a229d9a0e34b2c3660001b85610ea9565b9392505050565b60008160020b828360020b8560020b81610d8157610d816112da565b070160020b81610d9357610d936112da565b0790920392915050565b6000610dff826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610ed39092919063ffffffff16565b805190915015610bfe5780806020019051810190610e1d9190611309565b610bfe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b9f565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b6060610ee28484600085610eea565b949350505050565b606082471015610f7c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610b9f565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610fa59190611350565b60006040518083038185875af1925050503d8060008114610fe2576040519150601f19603f3d011682016040523d82523d6000602084013e610fe7565b606091505b50915091506105bd878383876060831561108657825161107f5773ffffffffffffffffffffffffffffffffffffffff85163b61107f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b9f565b5081610ee2565b610ee2838381511561109b5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9f919061136c565b6fffffffffffffffffffffffffffffffff811681146110ed57600080fd5b50565b60006020828403121561110257600080fd5b8135610d5e816110cf565b60006020828403121561111f57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff811681146110ed57600080fd5b60006020828403121561115a57600080fd5b8151610d5e81611126565b8051801515811461117557600080fd5b919050565b6000806000806080858703121561119057600080fd5b845161119b81611126565b8094505060208501518060020b81146111b357600080fd5b604086015190935063ffffffff811681146111cd57600080fd5b91506111db60608601611165565b905092959194509250565b60006101008201905082518252602083015173ffffffffffffffffffffffffffffffffffffffff80821660208501528060408601511660408501528060608601511660608501525050608083015160020b608083015260a0830151151560a083015260c083015161125c60c084018260020b9052565b5060e083015161128060e08401826fffffffffffffffffffffffffffffffff169052565b5092915050565b60006020828403121561129957600080fd5b5051919050565b600080604083850312156112b357600080fd5b82516112be816110cf565b60208401519092506112cf816110cf565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006020828403121561131b57600080fd5b610d5e82611165565b60005b8381101561133f578181015183820152602001611327565b83811115610a625750506000910152565b60008251611362818460208701611324565b9190910192915050565b602081526000825180602084015261138b816040850160208701611324565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea264697066735822122050bebd7391bffcfe136f1fcbbed015c7239f0a4aad967927d847089ee05ca36164736f6c63430008090033";

type ExampleMakerOrderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExampleMakerOrderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExampleMakerOrder__factory extends ContractFactory {
  constructor(...args: ExampleMakerOrderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _makerOrderManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ExampleMakerOrder> {
    return super.deploy(
      _makerOrderManager,
      overrides || {}
    ) as Promise<ExampleMakerOrder>;
  }
  override getDeployTransaction(
    _makerOrderManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_makerOrderManager, overrides || {});
  }
  override attach(address: string): ExampleMakerOrder {
    return super.attach(address) as ExampleMakerOrder;
  }
  override connect(signer: Signer): ExampleMakerOrder__factory {
    return super.connect(signer) as ExampleMakerOrder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExampleMakerOrderInterface {
    return new utils.Interface(_abi) as ExampleMakerOrderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExampleMakerOrder {
    return new Contract(address, _abi, signerOrProvider) as ExampleMakerOrder;
  }
}
