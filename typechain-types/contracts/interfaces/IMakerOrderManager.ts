/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IGridParameters {
  export type BoundaryLowerWithAmountParametersStruct = {
    boundaryLower: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type BoundaryLowerWithAmountParametersStructOutput = [
    number,
    BigNumber
  ] & { boundaryLower: number; amount: BigNumber };
}

export declare namespace IMakerOrderManager {
  export type InitializeParametersStruct = {
    tokenA: PromiseOrValue<string>;
    tokenB: PromiseOrValue<string>;
    resolution: PromiseOrValue<BigNumberish>;
    priceX96: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
    orders0: IGridParameters.BoundaryLowerWithAmountParametersStruct[];
    orders1: IGridParameters.BoundaryLowerWithAmountParametersStruct[];
  };

  export type InitializeParametersStructOutput = [
    string,
    string,
    number,
    BigNumber,
    string,
    IGridParameters.BoundaryLowerWithAmountParametersStructOutput[],
    IGridParameters.BoundaryLowerWithAmountParametersStructOutput[]
  ] & {
    tokenA: string;
    tokenB: string;
    resolution: number;
    priceX96: BigNumber;
    recipient: string;
    orders0: IGridParameters.BoundaryLowerWithAmountParametersStructOutput[];
    orders1: IGridParameters.BoundaryLowerWithAmountParametersStructOutput[];
  };

  export type PlaceOrderParametersStruct = {
    deadline: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
    tokenA: PromiseOrValue<string>;
    tokenB: PromiseOrValue<string>;
    resolution: PromiseOrValue<BigNumberish>;
    zero: PromiseOrValue<boolean>;
    boundaryLower: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type PlaceOrderParametersStructOutput = [
    BigNumber,
    string,
    string,
    string,
    number,
    boolean,
    number,
    BigNumber
  ] & {
    deadline: BigNumber;
    recipient: string;
    tokenA: string;
    tokenB: string;
    resolution: number;
    zero: boolean;
    boundaryLower: number;
    amount: BigNumber;
  };

  export type PlaceOrderInBatchParametersStruct = {
    deadline: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
    tokenA: PromiseOrValue<string>;
    tokenB: PromiseOrValue<string>;
    resolution: PromiseOrValue<BigNumberish>;
    zero: PromiseOrValue<boolean>;
    orders: IGridParameters.BoundaryLowerWithAmountParametersStruct[];
  };

  export type PlaceOrderInBatchParametersStructOutput = [
    BigNumber,
    string,
    string,
    string,
    number,
    boolean,
    IGridParameters.BoundaryLowerWithAmountParametersStructOutput[]
  ] & {
    deadline: BigNumber;
    recipient: string;
    tokenA: string;
    tokenB: string;
    resolution: number;
    zero: boolean;
    orders: IGridParameters.BoundaryLowerWithAmountParametersStructOutput[];
  };

  export type RelativeOrderParametersStruct = {
    deadline: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
    tokenA: PromiseOrValue<string>;
    tokenB: PromiseOrValue<string>;
    resolution: PromiseOrValue<BigNumberish>;
    zero: PromiseOrValue<boolean>;
    amount: PromiseOrValue<BigNumberish>;
    priceDeltaX96: PromiseOrValue<BigNumberish>;
    priceMinimumX96: PromiseOrValue<BigNumberish>;
    priceMaximumX96: PromiseOrValue<BigNumberish>;
  };

  export type RelativeOrderParametersStructOutput = [
    BigNumber,
    string,
    string,
    string,
    number,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    deadline: BigNumber;
    recipient: string;
    tokenA: string;
    tokenB: string;
    resolution: number;
    zero: boolean;
    amount: BigNumber;
    priceDeltaX96: BigNumber;
    priceMinimumX96: BigNumber;
    priceMaximumX96: BigNumber;
  };
}

export interface IMakerOrderManagerInterface extends utils.Interface {
  functions: {
    "createGridAndInitialize((address,address,int24,uint160,address,(int24,uint128)[],(int24,uint128)[]))": FunctionFragment;
    "gridFactory()": FunctionFragment;
    "initialize((address,address,int24,uint160,address,(int24,uint128)[],(int24,uint128)[]))": FunctionFragment;
    "placeMakerOrder((uint256,address,address,address,int24,bool,int24,uint128))": FunctionFragment;
    "placeMakerOrderInBatch((uint256,address,address,address,int24,bool,(int24,uint128)[]))": FunctionFragment;
    "placeRelativeOrder((uint256,address,address,address,int24,bool,uint128,int160,uint160,uint160))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createGridAndInitialize"
      | "gridFactory"
      | "initialize"
      | "placeMakerOrder"
      | "placeMakerOrderInBatch"
      | "placeRelativeOrder"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createGridAndInitialize",
    values: [IMakerOrderManager.InitializeParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "gridFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [IMakerOrderManager.InitializeParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "placeMakerOrder",
    values: [IMakerOrderManager.PlaceOrderParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "placeMakerOrderInBatch",
    values: [IMakerOrderManager.PlaceOrderInBatchParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "placeRelativeOrder",
    values: [IMakerOrderManager.RelativeOrderParametersStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "createGridAndInitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gridFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeMakerOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeMakerOrderInBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeRelativeOrder",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IMakerOrderManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMakerOrderManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createGridAndInitialize(
      initializeParameters: IMakerOrderManager.InitializeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gridFactory(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      initializeParameters: IMakerOrderManager.InitializeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    placeMakerOrder(
      parameters: IMakerOrderManager.PlaceOrderParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    placeMakerOrderInBatch(
      parameters: IMakerOrderManager.PlaceOrderInBatchParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    placeRelativeOrder(
      parameters: IMakerOrderManager.RelativeOrderParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createGridAndInitialize(
    initializeParameters: IMakerOrderManager.InitializeParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gridFactory(overrides?: CallOverrides): Promise<string>;

  initialize(
    initializeParameters: IMakerOrderManager.InitializeParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  placeMakerOrder(
    parameters: IMakerOrderManager.PlaceOrderParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  placeMakerOrderInBatch(
    parameters: IMakerOrderManager.PlaceOrderInBatchParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  placeRelativeOrder(
    parameters: IMakerOrderManager.RelativeOrderParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createGridAndInitialize(
      initializeParameters: IMakerOrderManager.InitializeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    gridFactory(overrides?: CallOverrides): Promise<string>;

    initialize(
      initializeParameters: IMakerOrderManager.InitializeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    placeMakerOrder(
      parameters: IMakerOrderManager.PlaceOrderParametersStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    placeMakerOrderInBatch(
      parameters: IMakerOrderManager.PlaceOrderInBatchParametersStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    placeRelativeOrder(
      parameters: IMakerOrderManager.RelativeOrderParametersStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    createGridAndInitialize(
      initializeParameters: IMakerOrderManager.InitializeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gridFactory(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      initializeParameters: IMakerOrderManager.InitializeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    placeMakerOrder(
      parameters: IMakerOrderManager.PlaceOrderParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    placeMakerOrderInBatch(
      parameters: IMakerOrderManager.PlaceOrderInBatchParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    placeRelativeOrder(
      parameters: IMakerOrderManager.RelativeOrderParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createGridAndInitialize(
      initializeParameters: IMakerOrderManager.InitializeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gridFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      initializeParameters: IMakerOrderManager.InitializeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    placeMakerOrder(
      parameters: IMakerOrderManager.PlaceOrderParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    placeMakerOrderInBatch(
      parameters: IMakerOrderManager.PlaceOrderInBatchParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    placeRelativeOrder(
      parameters: IMakerOrderManager.RelativeOrderParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
