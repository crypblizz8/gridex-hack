/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ExampleFlash {
  export type FlashParamsStruct = {
    token0: PromiseOrValue<string>;
    token1: PromiseOrValue<string>;
    resolution: PromiseOrValue<BigNumberish>;
    isToken0Borrowed: PromiseOrValue<boolean>;
    amountIn: PromiseOrValue<BigNumberish>;
    tokenPath: PromiseOrValue<string>[];
    resolutions: PromiseOrValue<BigNumberish>[];
  };

  export type FlashParamsStructOutput = [
    string,
    string,
    number,
    boolean,
    BigNumber,
    string[],
    number[]
  ] & {
    token0: string;
    token1: string;
    resolution: number;
    isToken0Borrowed: boolean;
    amountIn: BigNumber;
    tokenPath: string[];
    resolutions: number[];
  };
}

export interface ExampleFlashInterface extends utils.Interface {
  functions: {
    "arbitrage((address,address,int24,bool,uint256,address[],int24[]))": FunctionFragment;
    "gridexFlashCallback(bytes)": FunctionFragment;
    "swapRouter()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "arbitrage" | "gridexFlashCallback" | "swapRouter"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "arbitrage",
    values: [ExampleFlash.FlashParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "gridexFlashCallback",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "arbitrage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gridexFlashCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;

  events: {};
}

export interface ExampleFlash extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExampleFlashInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    arbitrage(
      params: ExampleFlash.FlashParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gridexFlashCallback(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;
  };

  arbitrage(
    params: ExampleFlash.FlashParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gridexFlashCallback(
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    arbitrage(
      params: ExampleFlash.FlashParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    gridexFlashCallback(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapRouter(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    arbitrage(
      params: ExampleFlash.FlashParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gridexFlashCallback(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    arbitrage(
      params: ExampleFlash.FlashParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gridexFlashCallback(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
