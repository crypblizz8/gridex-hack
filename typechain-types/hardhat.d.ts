/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IGridFlashCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGridFlashCallback__factory>;
    getContractFactory(
      name: "IGrid",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGrid__factory>;
    getContractFactory(
      name: "IGridFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGridFactory__factory>;
    getContractFactory(
      name: "BoundaryMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoundaryMath__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ExampleFlash",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExampleFlash__factory>;
    getContractFactory(
      name: "ExampleMakerOrder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExampleMakerOrder__factory>;
    getContractFactory(
      name: "ExampleSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExampleSwap__factory>;
    getContractFactory(
      name: "IMakerOrderManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMakerOrderManager__factory>;
    getContractFactory(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter__factory>;

    getContractAt(
      name: "IGridFlashCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGridFlashCallback>;
    getContractAt(
      name: "IGrid",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGrid>;
    getContractAt(
      name: "IGridFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGridFactory>;
    getContractAt(
      name: "BoundaryMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BoundaryMath>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ExampleFlash",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExampleFlash>;
    getContractAt(
      name: "ExampleMakerOrder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExampleMakerOrder>;
    getContractAt(
      name: "ExampleSwap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExampleSwap>;
    getContractAt(
      name: "IMakerOrderManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMakerOrderManager>;
    getContractAt(
      name: "ISwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapRouter>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
